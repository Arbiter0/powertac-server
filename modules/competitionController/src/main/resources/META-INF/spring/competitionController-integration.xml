<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2002-2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration.xsd">

    <!--Generate a TimeslotChangedCommand every 5 seconds-->
    <publish-subscribe-channel id="CcTimeslotChangedCommandChannel"/>
    <inbound-channel-adapter ref="competitionController" method="processTimeslotChange"
                             channel="CcTimeslotChangedCommandChannel">
        <poller fixed-rate="5000"/>
    </inbound-channel-adapter>

    <!--1. Publish TimeslotUpdateCommand to all brokers-->
    <service-activator ref="brokerManager" method="broadcastCommand" input-channel="CcTimeslotChangedCommandChannel"/>

    <!--2. Tariff Handling-->
    <!--Ask the accounting service for the current tariff list-->
    <publish-subscribe-channel id="AsTariffPublishedCommandChannel"/>
    <service-activator ref="accountingService" method="publishTariffList"
                       input-channel="CcTimeslotChangedCommandChannel"
                       output-channel="AsTariffPublishedCommandChannel"/>

    <!--2.1 Publish list of TariffPublishedCommands to all brokers -->
    <service-activator ref="brokerManager" method="broadcastCommands" input-channel="AsTariffPublishedCommandChannel"/>

    <!--2.2. Allow customers to decide if they want to subscribe or negotiate-->
    <channel id="CuTariffReplyCommandsChannel"/>
    <service-activator ref="customer" method="processTariffList"
                       input-channel="AsTariffPublishedCommandChannel" output-channel="CuTariffReplyCommandsChannel"/>

    <!--2.2.1. Validate every reply using the TariffRuleEnforcer-->
    <!--In order to do so, the message list in CuTariffReplyCommandsChannel is split into single messages first-->
    <channel id="CuTariffReplyCommandChannel"/>
    <splitter input-channel="CuTariffReplyCommandsChannel" output-channel="CuTariffReplyCommandChannel"/>

    <!--2.2.2. Use a filter to validate each reply-->
    <channel id="CuTariffReplyCommandAcceptedChannel"/>
    <channel id="CuTariffReplyCommandRejectedChannel"/>
    <filter input-channel="CuTariffReplyCommandChannel" output-channel="CuTariffReplyCommandAcceptedChannel"
            discard-channel="CuTariffReplyCommandRejectedChannel" ref="tariffRuleEnforcerProxy"/>

    <!--2.2.2.1. Process validated TariffReply objects and send them to their respective broker-->
    <channel id="CuBrTariffReplyCommandChannel"/>
    <service-activator ref="accountingService" method="processTariffReply"
                       input-channel="CuTariffReplyCommandAcceptedChannel"
                       output-channel="CuBrTariffReplyCommandChannel"/>
    <!--2.2.2.1.1-->
    <service-activator ref="brokerManager" method="broadcastCommand" input-channel="CuBrTariffReplyCommandChannel"/>

    <!--2.2.2.2-->
    <!--TODO: Process rejected TariffReply objects from the discarded-channel (notify sender (customer))-->

    <!--3. Process deactivated timeslot-->
    <publish-subscribe-channel id="CcFilteredTimeslotChangedCommandChannel" apply-sequence="true"/>
    <filter input-channel="CcTimeslotChangedCommandChannel" output-channel="CcFilteredTimeslotChangedCommandChannel"
            expression="payload.enabled"/>

    <!--3.1. Get meter reading from all customers for the given timeslot-->
    <channel id="CcCuMeterReadingCommandChannel"/>
    <service-activator ref="customer" method="generateMeterReading"
                       input-channel="CcFilteredTimeslotChangedCommandChannel"
                       output-channel="CcCuMeterReadingCommandChannel"/>

    <!--3.2. Wait for all customer modules to report their readings and collect them-->
    <channel id="CuAsMeterReadingCommandsChannel"/>
    <aggregator input-channel="CcCuMeterReadingCommandChannel" output-channel="CuAsMeterReadingCommandsChannel"/>

    <!--3.3 Have the Accounting Service process the meter readings. Everyone can subscribe to receive the output-->
    <publish-subscribe-channel id="AsMeterReadingBalanceCommandsChannel"/>
    <service-activator ref="accountingService" method="processMeterReadings"
                       input-channel="CuAsMeterReadingCommandsChannel"
                       output-channel="AsMeterReadingBalanceCommandsChannel"/>

    <!--3.3.1 Send the processed meter reading (=balance) to the appropriate broker-->
    <channel id="AsBrMeterReadingBalanceCommandChannel"/>
    <splitter input-channel="AsMeterReadingBalanceCommandsChannel"
              output-channel="AsBrMeterReadingBalanceCommandChannel"/>
    <service-activator ref="brokerManager" method="broadcastCommand"
                       input-channel="AsBrMeterReadingBalanceCommandChannel"/>

    <!--3.3.2 Have the Distribution Utility process the meter balances. A list of cash/depot updates will be returned-->
    <channel id="DuAsCashAndDepotUpdateCommandsChannel"/>
    <service-activator ref="distributionUtility" method="processMeterReadingBalances"
                       input-channel="AsMeterReadingBalanceCommandsChannel"
                       output-channel="DuAsCashAndDepotUpdateCommandsChannel"/>

    <!--3.3.2.1 Split the depot/cash update commands and route them based on their type-->
    <channel id="DuAsCashOrDepotUpdateCommandChannel"/>
    <channel id="DuAsCashUpdateCommandChannel"/>
    <channel id="DuAsDepotUpdateCommandChannel"/>
    <splitter input-channel="DuAsCashAndDepotUpdateCommandsChannel"
              output-channel="DuAsCashOrDepotUpdateCommandChannel"/>
    <payload-type-router input-channel="DuAsCashOrDepotUpdateCommandChannel">
        <mapping type="org.powertac.common.commands.CashUpdate" channel="DuAsCashUpdateCommandChannel"/>
        <mapping type="org.powertac.common.commands.DepotUpdate" channel="DuAsDepotUpdateCommandChannel"/>
    </payload-type-router>

    <!--3.3.2.2 Call the appropriate cash/depot update method of the Accounting Service -->
    <channel id="AsBrCashAndDepotUpdateCommandChannel"/>
    <service-activator ref="accountingService" method="processCashUpdate"
                       input-channel="DuAsCashUpdateCommandChannel"
                       output-channel="AsBrCashAndDepotUpdateCommandChannel"/>

    <service-activator ref="accountingService" method="processDepotUpdate"
                       input-channel="DuAsDepotUpdateCommandChannel"
                       output-channel="AsBrCashAndDepotUpdateCommandChannel"/>

    <!--3.3.2.3. Forward any update command to the broker-->
    <service-activator ref="brokerManager" method="broadcastCommand"
                       input-channel="AsBrCashAndDepotUpdateCommandChannel"/>

</beans:beans>
