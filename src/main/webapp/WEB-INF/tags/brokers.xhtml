<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:p="http://primefaces.org/ui">


<h:body>
	<ui:fragment>

		<ui:repeat var="broker" value="#{visualizerBean.brokers}">
			<script type="text/javascript">
	var cashChart#{broker.id}=null;
	var energyChart#{broker.id}=null;
	var customerSharesBarhChart#{broker.id}=null;
	</script>
		</ui:repeat>

		<p:tabView id="tabBrokers" var="broker" value="#{visualizerBean.brokers}" dynamic="true" cache="true">

			<p:tab title="#{broker.name}">

				<h:panelGrid columns="3" cellpadding="10">
					<p:graphicImage value="${broker.appearance.iconLocation}" width="85" height="85" />

					<h:panelGrid columns="2" cellpadding="10">
						<h:outputText value="Name: " />
						<h:outputText value="#{broker.name}" style="font-weight: bold" />

						<h:outputText value="Cash balance: " />
						<h:outputText value="#{broker.cashBalance}" style="font-weight: bold" />

						<h:outputText value="Energy balance: " />
						<h:outputText value="#{broker.energyBalance}" style="font-weight: bold" />

						<h:outputText value="Customer count: " />
						<h:outputText value="#{broker.customerCount}" style="font-weight: bold" />




					</h:panelGrid>

				</h:panelGrid>
				<!-- Cash line chart for a specific broker -->
				<div id="cashChart#{broker.id}" style="width: 700px; height: 250px"></div>

				<script type="text/javascript">
				
		 			if (window.cashChart#{broker.id}!=null) {
						window.cashChart#{broker.id}.destroy();					
					}
					window.cashChart#{broker.id} = $.jqplot('cashChart#{broker.id}', [ #{broker.cashBalanceJSONText} ],{
						title: 'Cash balance', 
						axesDefaults: {
						        labelRenderer: $.jqplot.CanvasAxisLabelRenderer},
						axes: {
							xaxis: {
						            label: "timeslot",
						            pad: 0},
						    yaxis: {
						            label: "cash"}},
						seriesDefaults: {
							showMarker: false
						},
						
						series:[#{broker.seriesOptions}],
						
						}); 
					</script>

				<!-- Energy chart for a specific broker -->
				<div id="energyChart#{broker.id}" style="width: 700px; height: 250px"></div>
				<script type="text/javascript">
				
		 			if (window.energyChart#{broker.id}!=null) {
						window.energyChart#{broker.id}.destroy();
						}
					window.energyChart#{broker.id} = $.jqplot('energyChart#{broker.id}', [ #{broker.energyBalanceJSONText} ],{
						title: 'Energy balance', 
						axesDefaults: {
						        labelRenderer: $.jqplot.CanvasAxisLabelRenderer},
						axes: {
							xaxis: {
						            label: "timeslot",
						            pad: 0},
						    yaxis: {
						            label: "energy/kWh"}},
						seriesDefaults: {
										showMarker: false
										},
						series:[#{broker.seriesOptions}]
						
						}); 
				</script>

				<!--  -->
				<div id="customerSharesBarhChart#{broker.id}" style="width: 1500px; height: 250px"></div>
				<script type="text/javascript">
				
		 			if (window.customerSharesBarhChart#{broker.id}!=null) {
						window.customerSharesBarhChart#{broker.id}.destroy();
						}
		 				 		     
		 		    window.customerSharesBarhChart#{broker.id} = $.jqplot('customerSharesBarhChart#{broker.id}', [#{broker.customerCountByTypesJSONText}], {
		 		        // The "seriesDefaults" option is an options object that will
		 		        // be applied to all series in the chart.
		 		        title: 'Customer count for each customer type',
		 		        seriesDefaults:{
		 		            renderer:$.jqplot.BarRenderer,
		 		            rendererOptions: {fillToZero: true	}
		 		        },
		 		        series:[
		 		            {label:'Count'}		 		         
		 		        ],
		 		        legend: {
		 		            show: true,
		 		            placement: 'outsideGrid'
		 		        },
		 		        axes: {
		 		            // Use a category axis on the x axis and use our custom ticks.
		 		            xaxis: {
		 		                renderer: $.jqplot.CategoryAxisRenderer,
		 		                ticks: #{broker.customerTicksJSONText}
		 		               
		 		            },
		 		            // Pad the y axis just a little so bars can get close to, but
		 		            // not touch, the grid boundaries.  1.2 is the default padding.
		 		            yaxis: {
		 		                pad: 1.05,
		 		               label: "count",
		 		               min : 0
		 		               
		 		            }
		 		        }
		 		    });
		 		    
		 		   </script>
		 		   <p:barChart rendered="false" value="fake" xaxisAngle="30"/>
		 		   
		 		   <p:panel>
		 		   <h:outputText value="debug output:    shares: #{broker.customerCountByTypesJSONText} ticks: #{broker.customerTicksJSONText}"/>
		 		   </p:panel>







			</p:tab>

		</p:tabView>




	</ui:fragment>
</h:body>

</html>

