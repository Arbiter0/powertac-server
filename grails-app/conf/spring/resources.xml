<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:si="http://www.springframework.org/schema/integration"
       xmlns:si-xml="http://www.springframework.org/schema/integration/xml"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
			http://www.springframework.org/schema/integration/xml
			http://www.springframework.org/schema/integration/xml/spring-integration-xml-2.0.xsd">

  <!--&lt;!&ndash;Auctioneer related messaging architecture&ndash;&gt;-->

  <!--&lt;!&ndash;Demo gateway for testing purposes that can receive incoming messages&ndash;&gt;-->
  <!--<si:gateway service-interface="org.powertac.server.IStringMessageService"-->
              <!--id="demoMessagingGateway"-->
              <!--default-request-channel="BrIncomingXml"/>-->

  <!--<si:channel id="BrIncomingXml"/>-->

  <!--&lt;!&ndash;Define (un)marshalling rules&ndash;&gt;-->
  <!--<bean id="xmlUnMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">-->
    <!--<property name="converters">-->
      <!--<list>-->
        <!--<bean class="org.powertac.server.converter.ShoutDoCreateCmdConverter"/>-->
      <!--</list>-->
    <!--</property>-->
    <!--<property name="aliases">-->
      <!--<props>-->
        <!--<prop key="shoutDoCreate">org.powertac.common.command.ShoutDoCreateCmd</prop>-->
        <!--<prop key="shoutDoDelete">org.powertac.common.command.ShoutDoDeleteCmd</prop>-->
        <!--<prop key="shoutDoUpdate">org.powertac.common.command.ShoutDoUpdateCmd</prop>-->
      <!--</props>-->
    <!--</property>-->
    <!--<property name="mode" value="1001"/>-->
    <!--&lt;!&ndash;1001=NO_REFERENCES, 1002=ID_REFERENCES &ndash;&gt;-->
  <!--</bean>-->

  <!--&lt;!&ndash;Map XML to domain class&ndash;&gt;-->
  <!--<si-xml:unmarshalling-transformer unmarshaller="xmlUnMarshaller" input-channel="BrIncomingXml"-->
                                    <!--output-channel="BrIncoming"/>-->

  <!--<si:publish-subscribe-channel id="BrIncoming"/>-->

  <!--&lt;!&ndash;Route domain class to different channels&ndash;&gt;-->
  <!--<si:payload-type-router input-channel="BrIncoming">-->
    <!--<si:mapping type="org.powertac.common.command.ShoutDoCreateCmd" channel="BrIncomingShoutDoCreate"/>-->
    <!--<si:mapping type="org.powertac.common.command.ShoutDoDeleteCmd" channel="BrIncomingShoutDoDelete"/>-->
    <!--<si:mapping type="org.powertac.common.command.ShoutDoUpdateCmd" channel="BrIncomingShoutDoUpdate"/>-->
  <!--</si:payload-type-router>-->

  <!--&lt;!&ndash; ===== &ndash;&gt;-->
  <!--&lt;!&ndash;Module processing here in other xml files&ndash;&gt;-->
  <!--&lt;!&ndash; ===== &ndash;&gt;-->

  <!--<si:channel id="BrIncomingCommandProcessed"/>-->

  <!--&lt;!&ndash;Check result type. If result is list, route it to a splitter. Otherwise route message directly to next router&ndash;&gt;-->
  <!--<si:payload-type-router input-channel="BrIncomingCommandProcessed"-->
                          <!--default-output-channel="BrIncomingCommandProcessedSingle">-->
    <!--<si:mapping type="java.util.List" channel="BrIncomingCommandProcessedList"/>-->
  <!--</si:payload-type-router>-->

  <!--&lt;!&ndash;Split result list&ndash;&gt;-->
  <!--<si:splitter input-channel="BrIncomingCommandProcessedList" output-channel="BrIncomingCommandProcessedSingle"/>-->

  <!--<si:channel id="BrIncomingCommandProcessedSingle"/>-->

  <!--&lt;!&ndash;Route single result by domain class type. Possible types defined in Auctioneer interface&ndash;&gt;-->
  <!--<si:payload-type-router input-channel="BrIncomingCommandProcessedSingle">-->
    <!--<si:mapping type="org.powertac.common.command.CashDoUpdateCmd" channel="ProcessCashDoUpdateCmd"/>-->
    <!--<si:mapping type="org.powertac.common.command.PositionDoUpdateCmd" channel="ProcessPositionDoUpdateCmd"/>-->
    <!--<si:mapping type="org.powertac.common.Orderbook" channel="BrOutgoingAll"/>-->
    <!--<si:mapping type="org.powertac.common.TransactionLog" channel="BrOutgoingAll"/>-->
    <!--<si:mapping type="org.powertac.common.Shout" channel="BrOutgoingSingle"/>-->
  <!--</si:payload-type-router>-->

  <!--&lt;!&ndash;Process CashDoUpdateCmd objects. This additional processing in contrast to Orderbook/TransactionLog/Shout objects&ndash;&gt;-->
  <!--&lt;!&ndash;is necessary because a Cmd object needs to be processed by some entity (i.e. Accounting Service) that &ndash;&gt;-->
  <!--&lt;!&ndash;will return the domain class object (i.e. CashUpdate) which is to be communicated to broker(s)&ndash;&gt;-->
  <!--<si:channel id="ProcessCashDoUpdateCmd"/>-->

  <!--<si:service-activator ref="accountingService" method="processCashUpdate"-->
                        <!--input-channel="ProcessCashDoUpdateCmd" output-channel="BrOutgoingSingle"/>-->

  <!--&lt;!&ndash;Process PositionDoUpdateCmd objects. Additional processing required for the same reason as above&ndash;&gt;-->
  <!--<si:channel id="ProcessPositionDoUpdateCmd"/>-->

  <!--<si:service-activator ref="accountingService" method="processPositionUpdate"-->
                        <!--input-channel="ProcessPositionDoUpdateCmd" output-channel="BrOutgoingSingle"/>-->

  <!--&lt;!&ndash;Channel to send message to single broker specified within the object&ndash;&gt;-->
  <!--<si:channel id="BrOutgoingSingle"/>-->
  <!--&lt;!&ndash;Channel to send message to all brokers&ndash;&gt;-->
  <!--<si:channel id="BrOutgoingAll"/>-->

  <!--<si:service-activator ref="brokerManagementService" method="sendMessage"-->
                        <!--input-channel="BrOutgoingSingle"/>-->

  <!--<si:service-activator ref="brokerManagementService" method="broadcastMessage"-->
                        <!--input-channel="BrOutgoingAll"/>-->
  <!--&lt;!&ndash; ==================== &ndash;&gt;-->
  <!--&lt;!&ndash;Old stuff:&ndash;&gt;-->

  <!--<si:service-activator id="localService" method="store" input-channel="BrIncoming"-->
                        <!--ref="timeslotManagementService"/>-->

  <!--<si:gateway service-interface="org.powertac.server.ICommandEncodingService" id="commandEncode"-->
              <!--default-request-channel="incomingShoutCmd"/>-->

  <!--<si:channel id="incomingShoutCmd"/>-->

  <!--<si-xml:marshalling-transformer marshaller="xmlUnMarshaller" input-channel="incomingShoutCmd"-->
                                  <!--output-channel="shout"/>-->
  <!--<si:service-activator method="handleShout" input-channel="shout" ref="timeslotManagementService"/>-->
</beans>